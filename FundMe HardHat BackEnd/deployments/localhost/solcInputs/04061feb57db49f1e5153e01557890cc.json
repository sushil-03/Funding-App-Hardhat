{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "/*\n    Aim\n    1.Get fund from user\n    2.Withdraw fund\n    3.set a minimum funding value in USD\n*/\n//SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\nimport \"./PriceConvertor.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n//Custom error are also way of reducing gas\n\nerror FundMe__NotOwner();\n\n/**  @title Contract for crowd funding\n * @author Sushil Boss\n * @notice Demo\n */\ncontract FundMe {\n    //Type declaration\n    using PriceConvertor for uint256;\n\n    //State Variables\n    address[] private s_funders;\n    address private immutable i_owner; //One time initialization\n    AggregatorV3Interface private s_priceFeed;\n    mapping(address => uint256) private s_addressToAmountFunded;\n    uint public constant MINIMUM_USD = 50 * 1e18; //Miniumum amount in usd\n\n    //Modifier\n    modifier onlyOwner() {\n        // require(msg.sender==i_owner,\"Sender is not owner\");\n        if (msg.sender != i_owner) {\n            revert FundMe__NotOwner();\n        }\n        _; //This represent doing rest of the code\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    constructor(AggregatorV3Interface priceFeedAddress) {\n        i_owner = msg.sender;\n        s_priceFeed = priceFeedAddress;\n    }\n\n    function fund() public payable {\n        require(\n            msg.value.getConversion(s_priceFeed) > MINIMUM_USD,\n            \"Didn't send enough \"\n        );\n        s_funders.push(msg.sender);\n        s_addressToAmountFunded[msg.sender] = msg.value;\n    }\n\n    // function sWithdraw() public payable onlyOwner {\n    //     for (uint i = 0; i < s_funders.length; i++) {\n    //         s_addressToAmountFunded[s_funders[i]] = 0;\n    //     }\n\n    //     //Reset the array\n    //     s_funders = new address[](0);\n\n    //     //Withdraw the fund\n\n    //     (bool callSuccess, ) = payable(msg.sender).call{\n    //         value: address(this).balance\n    //     }(\"\");\n    //     require(callSuccess, \"Send failed\");\n    // }\n\n    //This one is cheaper\n    function Withdraw() public payable onlyOwner {\n        address[] memory funders = s_funders;\n        for (uint i = 0; i < funders.length; i++) {\n            s_addressToAmountFunded[funders[i]] = 0;\n        }\n        s_funders = new address[](0);\n\n        //Withdraw the fund\n\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Send failed\");\n    }\n\n    function getOwner() public view returns (address) {\n        return i_owner;\n    }\n\n    function getFunder(uint256 index) public view returns (address) {\n        return s_funders[index];\n    }\n\n    function getAddressToAmountFunded(address funder)\n        public\n        view\n        returns (uint256)\n    {\n        return s_addressToAmountFunded[funder];\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return s_priceFeed;\n    }\n}\n\n/*  There are 3 ways to withdraw fund\n        1.Transfer  transfer(2300 gas,throws error if get above)\n        2.Send      send(2300 gas, return bool)\n        3.Call      call(forward all gas or set gas,return bool)\n    \n        1 Transfer\n        msg.sender is address type  to transfer fund we have to type cast in payable address\n         payable(msg.sender).transfer(address(this).balance);\n\n        2.Send\n         bool sendSuccess =  payable(msg.sender).send(address(this).balance);\n         require(sendSuccess,\"Send failed\");\n\n        3.Call\n        (bool callSuccess,)=payable(msg.sender).call{value:address(this).balance}(\"\");\n        require(callSuccess,\"Send failed\");\n*/\n/*\nWhat happen if someone send this contact ETH without calling the fund function?\nSolution we will call fund function through receive and fallback\n                Receive and Fallback\n                    is msg.data empty?\n                        /      \\\n                     yes        no  \n                receive()?     fallback()\n                  /   \\\n                yes   no\n           receive()  fallback() \n*/\n"
    },
    "contracts/PriceConvertor.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConvertor {\n    function getPrice(AggregatorV3Interface priceFeed)\n        internal\n        view\n        returns (uint)\n    {\n        //Address  0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\n        //ABI\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        return uint(price); //\n    }\n\n    function getConversion(uint ethAmount, AggregatorV3Interface priceFeed)\n        internal\n        view\n        returns (uint)\n    {\n        uint ethPrice = getPrice(priceFeed);\n        uint ethAmountInUSD = (ethPrice * ethAmount) / 1e8;\n        return ethAmountInUSD;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}